#!/usr/bin/env python

from pandas import read_table
from pandas.core.common import SettingWithCopyWarning
import numpy as np
import os
import warnings

# Ignore useless warning
warnings.filterwarnings('ignore', category=SettingWithCopyWarning)

# [km] If not None, truncate model to this depth
MAX_DEPTH = 1200

# Read in model cleanly
tmp = read_table(
    'http://ds.iris.edu/media/product/emc-syngine/files/1dmodel_ak135f.txt',
    delim_whitespace=True,
    header=4,
    comment='#',
)
model = tmp[tmp.columns[:-1]]
model.columns = tmp.columns[1:]

# Unit conversions
model.radius = model.radius / 1000.0  # To km
model.rho = model.rho / 1000.0  # To g/cm^3
model.vpv = model.vpv / 1000.0  # To km
model.vsv = model.vsv / 1000.0  # To km

# Convert to layers
model['H(KM)'] = np.hstack([np.diff(np.abs(model.radius - model.radius[0])), 0])
model = model[model['H(KM)'] != 0].reset_index()
model = model.drop('radius', axis=1)

# Add columns
model['ETAP'] = np.zeros(model.shape[0])
model['ETAS'] = np.zeros(model.shape[0])
model['FREFP'] = np.ones(model.shape[0])
model['FREFS'] = np.ones(model.shape[0])

# Rename remaining columns
model = model.rename(
    columns=dict(rho='RHO(GM/CC)', vpv='VP(KM/S)', vsv='VS(KM/S)', qka='QP', qmu='QS')
)

# Put columns in correct order
COLUMNS = [
    'H(KM)',
    'VP(KM/S)',
    'VS(KM/S)',
    'RHO(GM/CC)',
    'QP',
    'QS',
    'ETAP',
    'ETAS',
    'FREFP',
    'FREFS',
]
model = model[COLUMNS]

# Truncate to desired depth, if specified
if MAX_DEPTH:
    depth = np.cumsum(model['H(KM)'])  # [km]
    ind = depth.index[depth == MAX_DEPTH].tolist()[0]
    model = model[: ind + 1]

    # Make sure things worked
    assert model['H(KM)'].sum() == MAX_DEPTH, 'Truncation failure!'

    comment = f', truncated to {MAX_DEPTH:g} km'

else:
    comment = ''

TAB = '    '  # Four-space tab
with open(os.path.join(os.getcwd(), 'ak135f_truncated.mod'), 'w') as f:

    def line(string):
        return f.write(string + '\n')

    line('MODEL.01')
    line('AxiSEM input file "1dmodel_ak135f.txt" (from IRIS)' + comment)
    line('ISOTROPIC')
    line('KGS')
    line('SPHERICAL EARTH')
    line('1-D')
    line('CONSTANT VELOCITY')
    line('LINE08')
    line('LINE09')
    line('LINE10')
    line('LINE11')
    line(TAB.join(COLUMNS))
    for _, row in model.iterrows():
        line(
            TAB.join(
                [
                    '{: =4.1f}'.format(row['H(KM)']),
                    '{: =7.4f}'.format(row['VP(KM/S)']),
                    '{: =7.4f}'.format(row['VS(KM/S)']),
                    '{: =7.4f}'.format(row['RHO(GM/CC)']),
                    '{: =7.1f}'.format(row['QP']),
                    '{: =7.1f}'.format(row['QS']),
                    '{: =3.1f}'.format(row['ETAP']),
                    '{: =3.1f}'.format(row['ETAS']),
                    '{: =3.1f}'.format(row['FREFP']),
                    '{: =3.1f}'.format(row['FREFS']),
                ]
            )
        )
